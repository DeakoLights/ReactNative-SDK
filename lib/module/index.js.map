{"version":3,"sources":["index.tsx"],"names":["NativeModules","NativeEventEmitter","Platform","GleapNetworkIntercepter","LINKING_ERROR","select","ios","default","GleapSdk","Gleapsdk","Proxy","get","Error","touched","networkLogger","startNetworkLogging","start","stopNetworkLogging","setStopped","callbacks","registerListener","eventType","callback","push","registerCustomAction","customActionCallback","notifyCallback","data","length","i","gleapEmitter","addListener","config","configJSON","Object","JSON","parse","enableNetworkLogs","exp","requests","getRequests","OS","attachNetworkLog","stringify","dataJSON","isJsonString","str","e","name","removeAllAttachments"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\nimport GleapNetworkIntercepter from './networklogger';\n\nconst LINKING_ERROR =\n  `The package 'react-native-gleapsdk' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\nexport type GleapUserProperty = {\n  email?: string;\n  name?: string;\n};\n\ntype GleapActivationMethod = 'SHAKE' | 'SCREENSHOT';\n\ntype GleapSdkType = {\n  initialize(token: string): void;\n  open(): void;\n  startFeedbackFlow(feedbackFlow: string): void;\n  sendSilentBugReport(\n    description: string,\n    severity: 'LOW' | 'MEDIUM' | 'HIGH'\n  ): void;\n  sendSilentBugReportWithType(\n    description: string,\n    severity: 'LOW' | 'MEDIUM' | 'HIGH',\n    type: string\n  ): void;\n  identify(userId: string, userProperties: GleapUserProperty): void;\n  clearIdentity(): void;\n  setApiUrl(apiUrl: string): void;\n  setWidgetUrl(widgetUrl: string): void;\n  attachCustomData(customData: any): void;\n  setCustomData(key: string, value: string): void;\n  removeCustomDataForKey(key: string): void;\n  clearCustomData(): void;\n  registerCustomAction(\n    customActionCallback: (data: { name: string }) => void\n  ): void;\n  registerListener(eventType: string, callback: (data?: any) => void): void;\n  setLanguage(language: string): void;\n  logEvent(name: string, data: any): void;\n  addAttachment(base64file: string, fileName: string): void;\n  removeAllAttachments(): void;\n  startNetworkLogging(): void;\n  stopNetworkLogging(): void;\n  enableDebugConsoleLog(): void;\n  setActivationMethods(activationMethods: GleapActivationMethod[]): void;\n};\n\nconst GleapSdk = NativeModules.Gleapsdk\n  ? NativeModules.Gleapsdk\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\nif (GleapSdk && !GleapSdk.touched) {\n  const networkLogger = new GleapNetworkIntercepter();\n\n  GleapSdk.startNetworkLogging = () => {\n    networkLogger.start();\n  };\n\n  GleapSdk.stopNetworkLogging = () => {\n    networkLogger.setStopped(true);\n  };\n\n  var callbacks: any = {};\n\n  GleapSdk.registerListener = (eventType: string, callback: any) => {\n    if (!callbacks[eventType]) {\n      callbacks[eventType] = [];\n    }\n    callbacks[eventType].push(callback);\n  };\n\n  GleapSdk.registerCustomAction = (customActionCallback: any) => {\n    GleapSdk.registerListener('customActionTriggered', customActionCallback);\n  };\n\n  const notifyCallback = function (eventType: string, data?: any) {\n    if (callbacks && callbacks[eventType] && callbacks[eventType].length > 0) {\n      for (var i = 0; i < callbacks[eventType].length; i++) {\n        if (callbacks[eventType][i]) {\n          callbacks[eventType][i](data);\n        }\n      }\n    }\n  };\n\n  const gleapEmitter = new NativeEventEmitter(NativeModules.Gleapsdk);\n\n  gleapEmitter.addListener('configLoaded', (config: any) => {\n    try {\n      const configJSON = config instanceof Object ? config : JSON.parse(config);\n      if (configJSON.enableNetworkLogs) {\n        GleapSdk.startNetworkLogging();\n      }\n      notifyCallback('configLoaded', configJSON);\n    } catch (exp) {}\n  });\n\n  gleapEmitter.addListener('feedbackWillBeSent', () => {\n    // Push the network log to the native SDK.\n    const requests = networkLogger.getRequests();\n    if (Platform.OS === 'android') {\n      GleapSdk.attachNetworkLog(JSON.stringify(requests));\n    } else {\n      GleapSdk.attachNetworkLog(JSON.parse(JSON.stringify(requests)));\n    }\n\n    notifyCallback('feedbackWillBeSent');\n  });\n\n  gleapEmitter.addListener('feedbackSent', (data) => {\n    try {\n      const dataJSON = data instanceof Object ? data : JSON.parse(data);\n      notifyCallback('feedbackSent', dataJSON);\n    } catch (exp) {}\n  });\n\n  gleapEmitter.addListener('feedbackSendingFailed', () => {\n    notifyCallback('feedbackSendingFailed');\n  });\n\n  function isJsonString(str: string) {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  gleapEmitter.addListener('customActionTriggered', (data: any) => {\n    try {\n      if (isJsonString(data)) {\n        data = JSON.parse(data);\n      }\n      const { name } = data;\n      if (name) {\n        notifyCallback('customActionTriggered', {\n          name,\n        });\n      }\n    } catch (exp) {}\n  });\n\n  GleapSdk.removeAllAttachments();\n\n  GleapSdk.touched = true;\n}\n\nexport default GleapSdk as GleapSdkType;\n"]}