{"version":3,"sources":["networklogger.ts"],"names":["GleapNetworkIntercepter","setUpdatedCallback","updatedCallback","getRequests","Object","values","requests","setMaxRequests","maxRequests","setStopped","stopped","cleanRequests","keys","length","keysToRemove","slice","i","calcRequestTime","gleapRequestId","startDate","date","getTime","isFrozen","duration","Date","toString","getTextContentSizeOk","text","size","kiloBytes","megaBytes","prepareContent","cleanupPayload","payload","undefined","ArrayBuffer","isView","byteLength","exp","preparePayload","payloadText","start","interceptNetworkRequests","onFetch","params","method","request","body","headers","type","url","onFetchLoad","req","success","response","status","statusText","responseText","then","catch","_err","onFetchFailed","onOpen","args","onSend","requestHeaders","onError","onLoad","contentType","getResponseHeader","isTextOrJSON","includes","responseType","_response","callback","self","XMLHttpRequest","prototype","open","send","wrappedSetRequestHeader","setRequestHeader","header","value","hasOwnProperty","push","requestId","arguments","addEventListener","apply","global","originalFetch","fetch","clone","data","err"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nclass GleapNetworkIntercepter {\n  requestId = 0;\n  requests: any = {};\n  maxRequests = 25;\n  stopped = false;\n  updatedCallback: any = null;\n\n  setUpdatedCallback(updatedCallback: any) {\n    this.updatedCallback = updatedCallback; \n  }\n\n  getRequests() {\n    return Object.values(this.requests);\n  }\n\n  setMaxRequests(maxRequests: number) {\n    this.maxRequests = maxRequests;\n  }\n\n  setStopped(stopped: boolean) {\n    this.stopped = stopped;\n  }\n\n  cleanRequests() {\n    var keys = Object.keys(this.requests);\n    if (keys.length > this.maxRequests) {\n      var keysToRemove = keys.slice(0, keys.length - this.maxRequests);\n      for (var i = 0; i < keysToRemove.length; i++) {\n        delete this.requests[keysToRemove[i]];\n      }\n    }\n\n    if (this.updatedCallback) {\n      this.updatedCallback();\n    }\n  }\n\n  calcRequestTime(gleapRequestId: string | number) {\n    if (!this.requests[gleapRequestId]) {\n      return;\n    }\n\n    var startDate = this.requests[gleapRequestId].date;\n    if (\n      startDate &&\n      typeof startDate.getTime === 'function' &&\n      !Object.isFrozen(this.requests[gleapRequestId])\n    ) {\n      this.requests[gleapRequestId].duration =\n        new Date().getTime() - startDate.getTime();\n      this.requests[gleapRequestId].date =\n        this.requests[gleapRequestId].date.toString();\n    }\n  }\n\n  getTextContentSizeOk(text: string) {\n    if (text && text.length) {\n      const size = text.length * 16;\n      const kiloBytes = size / 1024;\n      const megaBytes = kiloBytes / 1024;\n      if (megaBytes < 0.2) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  prepareContent(text: string) {\n    if (!this.getTextContentSizeOk(text)) {\n      return \"<content_too_large>\";\n    }\n\n    return text;\n  }\n\n  cleanupPayload(payload: any) {\n    if (payload === undefined || payload === null) {\n      return \"{}\";\n    }\n\n    try {\n      if (ArrayBuffer.isView(payload)) {\n        return `{ type: \"binary\", length: ${payload.byteLength} }`;\n      }\n    } catch (exp) { }\n\n    return payload;\n  }\n\n  preparePayload(payload: any) {\n    var payloadText = this.cleanupPayload(payload);\n    return this.prepareContent(payloadText);\n  }\n\n  start() {\n    this.setStopped(false);\n    this.interceptNetworkRequests({\n      onFetch: (params: any[], gleapRequestId: any) => {\n        if (this.stopped || params.length === 0) {\n          return;\n        }\n\n        if (params.length >= 2 && params[1] !== undefined) {\n          var method = params[1].method ? params[1].method : 'GET';\n          this.requests[gleapRequestId] = {\n            request: {\n              payload: this.preparePayload(params[1].body),\n              headers: params[1].headers,\n            },\n            type: method,\n            url: params[0],\n            date: new Date(),\n          };\n        } else {\n          this.requests[gleapRequestId] = {\n            request: {},\n            url: params[0],\n            type: 'GET',\n            date: new Date(),\n          };\n        }\n\n        this.cleanRequests();\n      },\n      onFetchLoad: (req: any, gleapRequestId: any) => {\n        if (\n          this.stopped ||\n          !gleapRequestId ||\n          !this.requests ||\n          !this.requests[gleapRequestId]\n        ) {\n          return;\n        }\n\n        try {\n          this.requests[gleapRequestId].success = true;\n          this.requests[gleapRequestId].response = {\n            status: req.status,\n            statusText: '',\n            responseText: '<request_still_open>',\n          };\n          this.calcRequestTime(gleapRequestId);\n        } catch (exp) {}\n\n        req\n          .text()\n          .then((responseText: any) => {\n            if (this.requests && this.requests[gleapRequestId]) {\n              this.requests[gleapRequestId].success = true;\n              this.requests[gleapRequestId].response = {\n                status: req.status,\n                statusText: req.statusText,\n                responseText: this.prepareContent(responseText),\n              };\n\n              this.calcRequestTime(gleapRequestId);\n              this.cleanRequests();\n            }\n          })\n          .catch((_err: any) => {\n            if (this) {\n              this.cleanRequests();\n            }\n          });\n      },\n      onFetchFailed: (_err: any, gleapRequestId: any) => {\n        if (this.stopped) {\n          return;\n        }\n\n        this.requests[gleapRequestId].success = false;\n        this.calcRequestTime(gleapRequestId);\n        this.cleanRequests();\n      },\n      onOpen: (request: any, args: string | any[]) => {\n        if (this.stopped) {\n          return;\n        }\n\n        if (\n          request &&\n          request.gleapRequestId &&\n          args.length >= 2 &&\n          this.requests\n        ) {\n          this.requests[request.gleapRequestId] = {\n            type: args[0],\n            url: args[1],\n            date: new Date(),\n          };\n        }\n\n        this.cleanRequests();\n      },\n      onSend: (request: any, args: string | any[]) => {\n        if (this.stopped) {\n          return;\n        }\n\n        if (\n          request &&\n          request.gleapRequestId &&\n          this.requests &&\n          this.requests[request.gleapRequestId]\n        ) {\n          this.requests[request.gleapRequestId].request = {\n            payload: this.preparePayload(args.length > 0 ? args[0] : ''),\n            headers: request.requestHeaders,\n          };\n        }\n\n        this.cleanRequests();\n      },\n      onError: (request: any) => {\n        if (\n          !this.stopped &&\n          this.requests &&\n          request &&\n          request.gleapRequestId &&\n          this.requests[request.gleapRequestId]\n        ) {\n          this.requests[request.gleapRequestId].success = false;\n          this.calcRequestTime(request.gleapRequestId);\n        }\n\n        this.cleanRequests();\n      },\n      onLoad: (request: any) => {\n        if (this.stopped) {\n          return;\n        }\n\n        if (\n          request &&\n          request.gleapRequestId &&\n          this.requests &&\n          this.requests[request.gleapRequestId]\n        ) {\n          const contentType = request.getResponseHeader('content-type');\n          const isTextOrJSON =\n            contentType &&\n            (contentType.includes('json') || contentType.includes('text'));\n\n          var responseText = '<' + contentType + '>';\n          if (request.responseType === '' || request.responseType === 'text') {\n            responseText = request.responseText;\n          }\n          if (request._response && isTextOrJSON) {\n            responseText = request._response;\n          }\n\n          this.requests[request.gleapRequestId].success = true;\n          this.requests[request.gleapRequestId].response = {\n            status: request.status,\n            responseText: this.prepareContent(responseText),\n          };\n\n          this.calcRequestTime(request.gleapRequestId);\n        }\n\n        this.cleanRequests();\n      },\n    });\n  }\n\n  interceptNetworkRequests(callback: any) {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n\n    // @ts-ignore\n    if (XMLHttpRequest.prototype['gleapTouched']) {\n      return;\n    }\n\n    // @ts-ignore\n    XMLHttpRequest.prototype['gleapTouched'] = true;\n\n    // XMLHttpRequest\n    const open = XMLHttpRequest.prototype.open;\n    const send = XMLHttpRequest.prototype.send;\n\n    // @ts-ignore\n    XMLHttpRequest.prototype.wrappedSetRequestHeader =\n      XMLHttpRequest.prototype.setRequestHeader;\n    XMLHttpRequest.prototype.setRequestHeader = function (header, value) {\n      // @ts-ignore\n      if (!this.requestHeaders) {\n        // @ts-ignore\n        this.requestHeaders = {};\n      }\n\n      // @ts-ignore\n      if (this.requestHeaders && this.requestHeaders.hasOwnProperty(header)) {\n        return;\n      }\n\n      // @ts-ignore\n      if (!this.requestHeaders[header]) {\n        // @ts-ignore\n        this.requestHeaders[header] = [];\n      }\n\n      // @ts-ignore\n      this.requestHeaders[header].push(value);\n      // @ts-ignore\n      this.wrappedSetRequestHeader(header, value);\n    };\n\n    XMLHttpRequest.prototype.open = function () {\n      (this as any).gleapRequestId = ++self.requestId;\n      callback.onOpen && callback.onOpen(this, arguments);\n\n      if (callback.onLoad) {\n        this.addEventListener('load', function () {\n          // @ts-ignore\n          callback.onLoad(this);\n        });\n      }\n      if (callback.onError) {\n        this.addEventListener('error', function () {\n          // @ts-ignore\n          callback.onError(this);\n        });\n      }\n\n      // @ts-ignore\n      return open.apply(this, arguments);\n    };\n\n    XMLHttpRequest.prototype.send = function () {\n      callback.onSend && callback.onSend(this, arguments);\n      // @ts-ignore\n      return send.apply(this, arguments);\n    };\n\n    // Fetch\n    if (global) {\n      (function () {\n        var originalFetch = global.fetch;\n        global.fetch = function () {\n          var gleapRequestId = ++self.requestId;\n          callback.onFetch(arguments, gleapRequestId);\n\n          return (\n            originalFetch\n              // @ts-ignore\n              .apply(this, arguments)\n              .then(function (response) {\n                if (response && typeof response.clone === 'function') {\n                  const data = response.clone();\n                  callback.onFetchLoad(data, gleapRequestId);\n                }\n\n                return response;\n              })\n              .catch((err) => {\n                callback.onFetchFailed(err, gleapRequestId);\n                throw err;\n              })\n          );\n        };\n      })();\n    }\n\n    return callback;\n  }\n}\n\nexport default GleapNetworkIntercepter;\n"]}