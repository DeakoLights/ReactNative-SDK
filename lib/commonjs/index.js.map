{"version":3,"sources":["index.tsx"],"names":["LINKING_ERROR","Platform","select","ios","default","GleapSdk","NativeModules","Gleapsdk","Proxy","get","Error","touched","networkLogger","GleapNetworkIntercepter","startNetworkLogging","setUpdatedCallback","requests","getRequests","attachNetworkLog","OS","JSON","stringify","parse","start","stopNetworkLogging","setStopped","callbacks","registerListener","eventType","callback","push","registerCustomAction","customActionCallback","notifyCallback","data","length","i","gleapEmitter","NativeEventEmitter","addListener","config","configJSON","Object","enableNetworkLogs","exp","dataJSON","feedbackAction","isJsonString","str","e","name","removeAllAttachments"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\nimport GleapNetworkIntercepter from './networklogger';\n\nconst LINKING_ERROR =\n  `The package 'react-native-gleapsdk' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\nexport type GleapUserProperty = {\n  email?: string;\n  name?: string;\n  phone?: string;\n  value?: number;\n};\n\ntype GleapActivationMethod = 'SHAKE' | 'SCREENSHOT';\n\ntype GleapSdkType = {\n  initialize(token: string): void;\n  startFeedbackFlow(feedbackFlow: string, showBackButton: boolean): void;\n  sendSilentCrashReport(\n    description: string,\n    severity: 'LOW' | 'MEDIUM' | 'HIGH'\n  ): void;\n  sendSilentCrashReportWithExcludeData(\n    description: string,\n    severity: 'LOW' | 'MEDIUM' | 'HIGH',\n    excludeData: {\n      customData?: Boolean;\n      metaData?: Boolean;\n      attachments?: Boolean;\n      consoleLog?: Boolean;\n      networkLogs?: Boolean;\n      customEventLog?: Boolean;\n      screenshot?: Boolean;\n      replays?: Boolean;\n    }\n  ): void;\n  open(): void;\n  close(): void;\n  isOpened(): boolean;\n  identify(userId: string, userProperties: GleapUserProperty): void;\n  identifyWithUserHash(\n    userId: string,\n    userProperties: GleapUserProperty,\n    userHash: string\n  ): void;\n  clearIdentity(): void;\n  preFillForm(formData: { [key: string]: string }): void;\n  setApiUrl(apiUrl: string): void;\n  setFrameUrl(frameUrl: string): void;\n  attachCustomData(customData: any): void;\n  setCustomData(key: string, value: string): void;\n  removeCustomDataForKey(key: string): void;\n  clearCustomData(): void;\n  registerListener(eventType: string, callback: (data?: any) => void): void;\n  setLanguage(language: string): void;\n  enableDebugConsoleLog(): void;\n  disableConsoleLog(): void;\n  log(message: string): void;\n  logWithLogLevel(message: string, logLevel: 'INFO' | 'WARNING' | 'ERROR'): void;\n  trackEvent(name: string, data: any): void;\n  addAttachment(base64file: string, fileName: string): void;\n  removeAllAttachments(): void;\n  startNetworkLogging(): void;\n  stopNetworkLogging(): void;\n  setActivationMethods(activationMethods: GleapActivationMethod[]): void;\n  registerCustomAction(\n    customActionCallback: (data: { name: string }) => void\n  ): void;\n};\n\nconst GleapSdk = NativeModules.Gleapsdk\n  ? NativeModules.Gleapsdk\n  : new Proxy(\n    {},\n    {\n      get() {\n        throw new Error(LINKING_ERROR);\n      },\n    }\n  );\n\nif (GleapSdk && !GleapSdk.touched) {\n  const networkLogger = new GleapNetworkIntercepter();\n\n  // Push the network log to the native SDK.\n  GleapSdk.startNetworkLogging = () => {\n    // Set the callback.\n    networkLogger.setUpdatedCallback(() => {\n      if (!networkLogger) {\n        return;\n      }\n\n      const requests = networkLogger.getRequests();\n   \n      if (requests && GleapSdk && typeof GleapSdk.attachNetworkLog !== 'undefined') {\n        if (Platform.OS === 'android') {\n          GleapSdk.attachNetworkLog(JSON.stringify(requests));\n        } else {\n          GleapSdk.attachNetworkLog(JSON.parse(JSON.stringify(requests)));\n        }\n      }\n    });\n\n    // Start the logger.\n    networkLogger.start();\n  };\n\n  GleapSdk.stopNetworkLogging = () => {\n    networkLogger.setStopped(true);\n  };\n\n  var callbacks: any = {};\n\n  GleapSdk.registerListener = (eventType: string, callback: any) => {\n    if (!callbacks[eventType]) {\n      callbacks[eventType] = [];\n    }\n    callbacks[eventType].push(callback);\n  };\n\n  GleapSdk.registerCustomAction = (customActionCallback: any) => {\n    GleapSdk.registerListener('customActionTriggered', customActionCallback);\n  };\n\n  const notifyCallback = function (eventType: string, data?: any) {\n    if (callbacks && callbacks[eventType] && callbacks[eventType].length > 0) {\n      for (var i = 0; i < callbacks[eventType].length; i++) {\n        if (callbacks[eventType][i]) {\n          callbacks[eventType][i](data);\n        }\n      }\n    }\n  };\n\n  const gleapEmitter = new NativeEventEmitter(NativeModules.Gleapsdk);\n\n  gleapEmitter.addListener('configLoaded', (config: any) => {\n    try {\n      const configJSON = config instanceof Object ? config : JSON.parse(config);\n      if (configJSON.enableNetworkLogs) {\n        GleapSdk.startNetworkLogging();\n      }\n      notifyCallback('configLoaded', configJSON);\n    } catch (exp) { }\n  });\n\n  gleapEmitter.addListener('feedbackSent', (data) => {\n    try {\n      const dataJSON = data instanceof Object ? data : JSON.parse(data);\n      notifyCallback('feedbackSent', dataJSON);\n    } catch (exp) { }\n  });\n\n  gleapEmitter.addListener('feedbackFlowStarted', (feedbackAction) => {\n    notifyCallback('feedbackFlowStarted', feedbackAction);\n  });\n\n  gleapEmitter.addListener('feedbackSendingFailed', () => {\n    notifyCallback('feedbackSendingFailed');\n  });\n\n  gleapEmitter.addListener('widgetOpened', () => {\n    notifyCallback('widgetOpened');\n  });\n\n  gleapEmitter.addListener('widgetClosed', () => {\n    notifyCallback('widgetClosed');\n  });\n\n  function isJsonString(str: string) {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  gleapEmitter.addListener('customActionTriggered', (data: any) => {\n    try {\n      if (isJsonString(data)) {\n        data = JSON.parse(data);\n      }\n      const { name } = data;\n      if (name) {\n        notifyCallback('customActionTriggered', {\n          name,\n        });\n      }\n    } catch (exp) { }\n  });\n\n  GleapSdk.removeAllAttachments();\n  GleapSdk.touched = true;\n}\n\nexport default GleapSdk as GleapSdkType;\n"]}